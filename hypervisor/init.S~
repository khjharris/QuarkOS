/**
	*Runs on start after bootloader
	*Author: Noah malhi - malhin@bu.edu
**/
section .text
	
global _main
_main:
	jmp		_init
	
	//may need to setup alignment --> believe they start at 0x00
	%macro _vec_entr label
	//$align	8
	jmp 	\label
	%endmacro
	$align
_vector_table:
	//based on page 457 of Quakc1000
	entry _vec_handler	//Divide by 0; 0x00
	entry _vec_handler	//Debug Exception; 0x01
	entry _vec_handler	//NMI Interrupt; 0x02
	entry _vec_handler	//Breakpoint; 0x03
	entry _vec_handler	//overflow; 0x04
	entry _unhandled_vec	//bound range exceeded; 0x05 		
	entry _unhandled_vec	//Invalid opcode; 0x06
	entry _unhandled_vec	//Device not available; 0x07
	entry _unhandled_vec	//Double fault 0x08
	entry _unhandled_vec	//Intel reserved; 0x09
	entry _unhandled_vec	//Invalid TSS 0x0A
	entry _unhandled_vec	//Segment not present; 0x0B
	entry _unhandled_vec    //Stack segment fault; 0x0C
	entry _unhandled_vec	//General protection; 0x0D
	entry _unhandled_vec	//Page fault; 0x0E
	entry _unhandled_vec	//Intel reserved; 0x0F
	entry _unhandled_vec	//floating point error; 0x10
	entry _unhandled_vec	//alignment check; 0x11
	//18-31 Intel Reserved
	//32-255 User Defined interrupts

//dont use %rsp --> includes stack pointer %esp
_init:
	//create el2 stack and point to it
	mov 	$el2_stack_end, %r9
	mov 	%r9, %esp
	//Clear binaries -> pushing registers onto the stack, clearing the binaries then restoring to a reg
	push	%r9
	push 	%r10
	jmp 	_clear_bss
	pop	%r10
	pop	%r9
	
	//jump to start routine
	jmp		_start

//if reaches here in assembly then goes to failsafe
fail:	jmp		failsafe


_vec_handler
